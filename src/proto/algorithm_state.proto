syntax = "proto3";

import "mixing_state.proto";
import "ls_state.proto";
import "matrix.proto";
import "hierarchy_prior.proto";
import "distribution.proto";

package bayesmix;


/*
 * This message represents the state of a Gibbs sampler for
 * a mixture model. All algorithms must be able to handle this
 * message, by filling it with the current state of the sampler
 * in the `get_state_as_proto` method.
 */
message AlgorithmState {
  message ClusterState {
    // Represents the state of a single cluster of component of
    // the mixture model. The first field is just a `oneof` wrapper
    // around the different possible states.
    oneof val {
      UniLSState uni_ls_state = 1; // State of a univariate location-scale family
      MultiLSState multi_ls_state = 2; // State of a multivariate location-scale family
      LinRegUniLSState lin_reg_uni_ls_state = 4; // State of a linear regression univariate location-scale family
      Vector general_state = 5; // Just a vector of doubles
      FAState fa_state = 6; // State of a Mixture of Factor Analysers
      SRState sr_state = 7; // State of a Mixture of Beta distributions
    }
    int32 cardinality = 3; // How many observations are in this cluster
  }

  repeated ClusterState cluster_states = 1; // The state of each cluster
  repeated int32 cluster_allocs = 2 [packed = true]; // Vector of allocations into clusters, one for each observation
  MixingState mixing_state = 3; // The state of the `Mixing`
  int32 iteration_num = 4; // The iteration number

  message HierarchyHypers {
    // Current values of the Hyperparameters of the Hierarchy
    oneof val {
      Vector general_state = 1;
      NIGDistribution nnig_state = 2;
      NWDistribution nnw_state = 3;
      MultiNormalIGDistribution lin_reg_uni_state = 4;
      NxIGDistribution nnxig_state = 5;
      FAPriorDistribution fa_state = 7;
      GamGamDistribution gg_state = 8;
    }
  }
  HierarchyHypers hierarchy_hypers = 5; // The current values of the hyperparameters of the hierarchy

}
